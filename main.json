{
	"Meta": {
		"Generator": "1",
		"Format": "1",
		"Date": "2022-02-20 03:29:12.27861222 +0000 UTC m=+0.000128603"
	},
	"Functions": [
		{
			"Name": "NewConfig",
			"Line": "func NewConfig() *Config",
			"Description": "Make a new default config instance",
			"Returns": {
				"Type": "Config"
			}
		},
		{
			"Name": "New",
			"Line": "func New() *minima",
			"Description": "Make a new default minima instance",
			"Returns": {
				"Type": "minima"
			}
		},
		{
			"Name": "NewRoutes",
			"Line": "func NewRoutes() *Routes",
			"Description": "Makes a new Routes instance",
			"Returns": {
				"Type": "*Routes"
			}
		},
		{
			"Name": "matchRoutes",
			"Line": "func matchRoutes(path string, routes []Route) (Handler, map[string]string, bool)",
			"Description": "Matches routes to the request",
			"Parameters": [
				{
					"Name": "path",
					"Type": "string",
					"Description": "Path of the request route to find"
				},
				{
					"Name": "routes",
					"Type": "[]Route",
					"Description": "The array of routes to match"
				}
			],
			"Returns": {
				"Type": "Handler, map[string]string, bool"
			}
		},
		{
			"Name": "cleanArray",
			"Line": "func cleanArray(a []string) []string",
			"Description": "Cleans the array and finds non nill values",
			"Parameters": [
				{
					"Name": "path",
					"Type": "string",
					"Description": "The array of string to slice and clean"
				}
			],
			"Returns": {
				"Type": "[]string"
			}
		},
		{
			"Name": "request",
			"Line": "func request(httpRequest *http.Request) *Request",
			"Description": "Make a new default request instance",
			"Parameters": [
				{
					"Name": "http.Request",
					"Type": "http.Request",
					"Description": "The net/http request instance"
				}
			],
			"Returns": {
				"Type": "Request"
			}
		},
		{
			"Name": "NewResHeader",
			"Line": "func NewResHeader(res http.ResponseWriter, req *http.Request) *OutgoingHeader",
			"Description": "Make a new default request header instance",
			"Parameters": [
				{
					"Name": "req",
					"Type": "http.Request",
					"Description": "The net/http request instance"
				},
				{
					"Name": "res",
					"Type": "http.ResponseWriter",
					"Description": "The net/http response instance"
				}
			],
			"Returns": {
				"Type": "OutgoingHeader"
			}
		},
		{
			"Name": "response",
			"Line": "func response(rw http.ResponseWriter, req *http.Request, props *map[string]interface}) *Response",
			"Description": "Make a new default response instance",
			"Parameters": [
				{
					"Name": "req",
					"Type": "http.Request",
					"Description": "The net/http request instance"
				},
				{
					"Name": "rs",
					"Type": "http.ResponseWriter",
					"Description": "The net/http response instance"
				},
				{
					"Name": "props",
					"Type": "map[string]interface{",
					"Description": "}  The net/http response instance"
				}
			],
			"Returns": {
				"Type": "Response"
			}
		},
		{
			"Name": "NewRouter",
			"Line": "func NewRouter() *Router",
			"Description": "Make new default router interface",
			"Returns": {}
		}
	],
	"Structures": [
		{
			"Name": "Config",
			"Line": "type Config struct",
			"Description": "The config structure",
			"Properties": [
				{
					"Name": "Middleware",
					"Type": "[]Handler",
					"Description": "The minima middlewares to be used"
				},
				{
					"Name": "HttpHandler",
					"Type": "[]http.HandlerFunc",
					"Description": "The net/http middlewares to be used"
				},
				{
					"Name": "router",
					"Type": "Router",
					"Description": "The router instance to be used"
				}
			]
		},
		{
			"Name": "minima",
			"Line": "type minima struct",
			"Description": "The framework structure",
			"Functions": [
				{
					"Name": "Listen",
					"Line": "func (m *minima) Listen(addr string) error",
					"Description": "Starts the actual http server",
					"Parameters": [
						{
							"Name": "addr",
							"Type": "string",
							"Description": "The port for the server instance to run on"
						}
					],
					"Returns": {
						"Type": "error"
					}
				},
				{
					"Name": "ServeHTTP",
					"Line": "func (m *minima) ServeHTTP(w http.ResponseWriter, r *http.Request)",
					"Description": "Injects the actual minima server logic to http",
					"Parameters": [
						{
							"Name": "w",
							"Type": "http.ResponseWriter",
							"Description": "The net/http response instance"
						},
						{
							"Name": "r",
							"Type": "http.Request",
							"Description": "The net/http request instance"
						}
					],
					"Returns": {}
				},
				{
					"Name": "Get",
					"Line": "func (m *minima) Get(path string, handler Handler) *minima",
					"Description": "Adds route with Get method",
					"Parameters": [
						{
							"Name": "path",
							"Type": "string",
							"Description": "The route path"
						},
						{
							"Name": "handler",
							"Type": "...Handler",
							"Description": "The handler for the given route"
						}
					],
					"Returns": {
						"Type": "*minima"
					}
				},
				{
					"Name": "Put",
					"Line": "func (m *minima) Put(path string, handler Handler) *minima",
					"Description": "Adds route with Put method",
					"Parameters": [
						{
							"Name": "path",
							"Type": "string",
							"Description": "The route path"
						},
						{
							"Name": "handler",
							"Type": "...Handler",
							"Description": "The handler for the given route"
						}
					],
					"Returns": {
						"Type": "*minima"
					}
				},
				{
					"Name": "Options",
					"Line": "func (m *minima) Options(path string, handler Handler) *minima",
					"Description": "Adds route with Options method",
					"Parameters": [
						{
							"Name": "path",
							"Type": "string",
							"Description": "The route path"
						},
						{
							"Name": "handler",
							"Type": "...Handler",
							"Description": "The handler for the given route"
						}
					],
					"Returns": {
						"Type": "*minima"
					}
				},
				{
					"Name": "Head",
					"Line": "func (m *minima) Head(path string, handler Handler) *minima",
					"Description": "Adds route with Head method",
					"Parameters": [
						{
							"Name": "path",
							"Type": "string",
							"Description": "The route path"
						},
						{
							"Name": "handler",
							"Type": "...Handler",
							"Description": "The handler for the given route"
						}
					],
					"Returns": {
						"Type": "*minima"
					}
				},
				{
					"Name": "Delete",
					"Line": "func (m *minima) Delete(path string, handler Handler) *minima",
					"Description": "Adds route with Delete method",
					"Parameters": [
						{
							"Name": "path",
							"Type": "string",
							"Description": "The route path"
						},
						{
							"Name": "handler",
							"Type": "...Handler",
							"Description": "The handler for the given route"
						}
					],
					"Returns": {
						"Type": "*minima"
					}
				},
				{
					"Name": "Patch",
					"Line": "func (m *minima) Patch(path string, handler Handler) *minima",
					"Description": "Adds route with Patch method",
					"Parameters": [
						{
							"Name": "path",
							"Type": "string",
							"Description": "The route path"
						},
						{
							"Name": "handler",
							"Type": "...Handler",
							"Description": "The handler for the given route"
						}
					],
					"Returns": {
						"Type": "*minima"
					}
				},
				{
					"Name": "Post",
					"Line": "func (m *minima) Post(path string, handler Handler) *minima",
					"Description": "Adds route with Post method",
					"Parameters": [
						{
							"Name": "path",
							"Type": "string",
							"Description": "The route path"
						},
						{
							"Name": "handler",
							"Type": "...Handler",
							"Description": "The handler for the given route"
						}
					],
					"Returns": {
						"Type": "*minima"
					}
				},
				{
					"Name": "NotFound",
					"Line": "func (m *minima) NotFound(handler Handler) *minima",
					"Description": "Injects the NotFound handler to the minima instance",
					"Parameters": [
						{
							"Name": "handler",
							"Type": "Handler",
							"Description": "Minima handler instance"
						}
					],
					"Returns": {
						"Type": "*minima"
					}
				},
				{
					"Name": "UseRouter",
					"Line": "func (m *minima) UseRouter(router *Router) *minima",
					"Description": "Injects the routes from the router to core stack",
					"Parameters": [
						{
							"Name": "router",
							"Type": "*Router",
							"Description": "Minima router instance"
						}
					],
					"Returns": {
						"Type": "*minima"
					}
				},
				{
					"Name": "Mount",
					"Line": "func (m *minima) Mount(path string, router *Router) *minima",
					"Description": "Mounts router to a specific path",
					"Parameters": [
						{
							"Name": "path",
							"Type": "string",
							"Description": "The route path"
						},
						{
							"Name": "router",
							"Type": "*Router",
							"Description": "Minima router instance"
						}
					],
					"Returns": {
						"Type": "*minima"
					}
				},
				{
					"Name": "UseConfig",
					"Line": "func (m *minima) UseConfig(config *Config) *minima",
					"Description": "Injects middlewares and routers directly to core instance",
					"Parameters": [
						{
							"Name": "config",
							"Type": "*Config",
							"Description": "The config instance"
						}
					],
					"Returns": {
						"Type": "*minima"
					}
				},
				{
					"Name": "ShutdownTimeout",
					"Line": "func (m *minima) ShutdownTimeout(t time.Duration) *minima",
					"Description": "The drain timeout for the core instance",
					"Parameters": [
						{
							"Name": "time",
							"Type": "time.Duration",
							"Description": "The time period for drain"
						}
					],
					"Returns": {
						"Type": "*minima"
					}
				},
				{
					"Name": "Shutdown",
					"Line": "func (m *minima) Shutdown(ctx context.Context) error",
					"Description": "Shutdowns the core instance",
					"Parameters": [
						{
							"Name": "ctx",
							"Type": "context.Context",
							"Description": "The context for shutdown"
						}
					],
					"Returns": {
						"Type": "error"
					}
				},
				{
					"Name": "SetProp",
					"Line": "func (m *minima) SetProp(key string, value interface}) *minima",
					"Description": "Declares prop for core properties",
					"Parameters": [
						{
							"Name": "key",
							"Type": "string",
							"Description": "Key for the prop"
						},
						{
							"Name": "value",
							"Type": "interface{",
							"Description": "}  Value of the prop"
						}
					],
					"Returns": {
						"Type": "*minima"
					}
				},
				{
					"Name": "GetProp",
					"Line": "func (m *minima) GetProp(key string) interface}",
					"Description": "Gets prop from core properties",
					"Parameters": [
						{
							"Name": "key",
							"Type": "string",
							"Description": "Key for the prop"
						}
					],
					"Returns": {
						"Type": "interface{",
						"Description": "}"
					}
				},
				{
					"Name": "Use",
					"Line": "func (m *minima) Use(handler ...Handler)",
					"Description": "Injects minima middleware to the stack",
					"Parameters": [
						{
							"Name": "handler",
							"Type": "...Handler",
							"Description": "The handler stack to append"
						}
					],
					"Returns": {}
				},
				{
					"Name": "UseRaw",
					"Line": "func (m *minima) UseRaw(handler ...http.HandlerFunc)",
					"Description": "Injects net/http middleware to the stack",
					"Parameters": [
						{
							"Name": "handler",
							"Type": "...http.HandlerFunc",
							"Description": "The handler stack to append"
						}
					],
					"Returns": {}
				},
				{
					"Name": "ServeMiddleware",
					"Line": "func (m *minima) ServeMiddleware(res *Response, req *Request)",
					"Description": "Serves and injects the middlewares to minima logic",
					"Parameters": [
						{
							"Name": "res",
							"Type": "Response",
							"Description": "The minima response instance"
						},
						{
							"Name": "req",
							"Type": "Request",
							"Description": "The minima req instance"
						}
					],
					"Returns": {}
				}
			],
			"Properties": [
				{
					"Name": "server",
					"Type": "*http.Server",
					"Description": "The net/http stock server"
				},
				{
					"Name": "started",
					"Type": "bool",
					"Description": "Whether the server has started or not"
				},
				{
					"Name": "Timeout",
					"Type": "*time.Duration",
					"Description": "The router's breathing time"
				},
				{
					"Name": "router",
					"Type": "*Router",
					"Description": "The core router instance running with the server"
				},
				{
					"Name": "minmiddleware",
					"Type": "[]Handler",
					"Description": "The standard minima handler stack"
				},
				{
					"Name": "rawmiddleware",
					"Type": "[]http.HandlerFunc",
					"Description": "The raw net/http minima handler stack"
				},
				{
					"Name": "properties",
					"Type": "map[string]interface{",
					"Description": "}  The properties for the server instance"
				},
				{
					"Name": "Config",
					"Type": "*Config",
					"Description": "The core config file for middlewares and router instances"
				},
				{
					"Name": "drain",
					"Type": "*time.Duration",
					"Description": "The router's drain time"
				}
			]
		},
		{
			"Name": "param",
			"Line": "type param struct",
			"Description": "The Param structure",
			"Properties": [
				{
					"Name": "name",
					"Type": "string",
					"Description": "The name of the param"
				},
				{
					"Name": "fixed",
					"Type": "bool",
					"Description": "Whether the param is fixed or not"
				}
			]
		},
		{
			"Name": "Route",
			"Line": "type Route struct",
			"Description": "The Route structure",
			"Properties": [
				{
					"Name": "prefix",
					"Type": "string",
					"Description": "The prefix of the route"
				},
				{
					"Name": "partnames",
					"Type": "[]param",
					"Description": "The route paths split into parts"
				},
				{
					"Name": "function",
					"Type": "Handler",
					"Description": "The handler to be used"
				}
			]
		},
		{
			"Name": "Routes",
			"Line": "type Routes struct",
			"Description": "The Routes root structure",
			"Functions": [
				{
					"Name": "Add",
					"Line": "func (r *Routes) Add(p string, f Handler)",
					"Description": "Adds a new route to the routes table",
					"Parameters": [
						{
							"Name": "path",
							"Type": "string",
							"Description": "Path of the route"
						},
						{
							"Name": "handler",
							"Type": "Handler",
							"Description": "Handler of the route"
						}
					],
					"Returns": {}
				},
				{
					"Name": "Get",
					"Line": "func (r *Routes) Get(path string) (Handler, map[string]string, bool)",
					"Description": "Gets handler and params from the routes table",
					"Parameters": [
						{
							"Name": "path",
							"Type": "string",
							"Description": "Path of the route to find"
						}
					],
					"Returns": {
						"Type": "Handler, map[string]string, bool"
					}
				}
			],
			"Properties": [
				{
					"Name": "roots",
					"Type": "map[string][]Route",
					"Description": "The map of array routes"
				}
			]
		},
		{
			"Name": "ReqHeader",
			"Line": "type ReqHeader struct",
			"Description": "The request headers structure",
			"Properties": [
				{
					"Name": "key",
					"Type": "string",
					"Description": "Key for the header"
				},
				{
					"Name": "value",
					"Type": "string",
					"Description": "Value of the header"
				}
			]
		},
		{
			"Name": "IncomingHeader",
			"Line": "type IncomingHeader struct",
			"Description": "The Incoming header structure",
			"Functions": [
				{
					"Name": "Get",
					"Line": "func (h IncomingHeader) Get(key string) string",
					"Description": "Gets request header from given key",
					"Returns": {}
				},
				{
					"Name": "Set",
					"Line": "func (h *IncomingHeader) Set(key string, v string)",
					"Description": "Declares request header from given key",
					"Returns": {}
				}
			],
			"Properties": [
				{
					"Name": "headers",
					"Type": "[]*ReqHeader",
					"Description": "Array of request headers"
				}
			]
		},
		{
			"Name": "Request",
			"Line": "type Request struct",
			"Description": "The request structure",
			"Functions": [
				{
					"Name": "GetParam",
					"Line": "func (r *Request) GetParam(key string) string",
					"Description": "Gets param from route path",
					"Parameters": [
						{
							"Name": "key",
							"Type": "string",
							"Description": "Key of the route param"
						}
					],
					"Returns": {
						"Type": "string"
					}
				},
				{
					"Name": "SetParam",
					"Line": "func (r *Request) SetParam(key string, value string) *Request",
					"Description": "Sets param for route path",
					"Parameters": [
						{
							"Name": "key",
							"Type": "string",
							"Description": "Key of the route param"
						},
						{
							"Name": "value",
							"Type": "string",
							"Description": "Value of the route param"
						}
					],
					"Returns": {
						"Type": "Respone"
					}
				},
				{
					"Name": "GetPathURL",
					"Line": "func (r *Request) GetPathURL() string",
					"Description": "Gets request path url",
					"Returns": {
						"Type": "string"
					}
				},
				{
					"Name": "Body",
					"Line": "func (r *Request) Body() map[string][]string",
					"Description": "Gets raw request body",
					"Returns": {
						"Type": "map[string][]string"
					}
				},
				{
					"Name": "GetBodyValue",
					"Line": "func (r *Request) GetBodyValue(key string) []string",
					"Description": "Gets specified request body",
					"Parameters": [
						{
							"Name": "key",
							"Type": "string",
							"Description": "Key of the request body"
						}
					],
					"Returns": {
						"Type": "[]string"
					}
				},
				{
					"Name": "Json",
					"Line": "func (r *Request) Json() *json.Decoder",
					"Description": "Gets raw json decoder instance",
					"Returns": {
						"Type": "json.Decoder"
					}
				},
				{
					"Name": "Method",
					"Line": "func (r *Request) Method() string",
					"Description": "Gets method of request",
					"Returns": {
						"Type": "string"
					}
				},
				{
					"Name": "Raw",
					"Line": "func (r *Request) Raw() *http.Request",
					"Description": "Gets raw net/http request instance",
					"Returns": {
						"Type": "http.Request"
					}
				},
				{
					"Name": "GetQuery",
					"Line": "func (r *Request) GetQuery(key string) string",
					"Description": "Gets request path query",
					"Parameters": [
						{
							"Name": "key",
							"Type": "string",
							"Description": "key of the request query"
						}
					],
					"Returns": {
						"Type": "string"
					}
				},
				{
					"Name": "Cookies",
					"Line": "func (r *Request) Cookies() []*http.Cookie",
					"Description": "Get all the cookies from the request",
					"Returns": {
						"Type": "[]*http.Cookie"
					}
				},
				{
					"Name": "Cookie",
					"Line": "func (r *Request) Cookie(key string) *http.Cookie",
					"Description": "Get a paticular cookie by its key",
					"Parameters": [
						{
							"Name": "key",
							"Type": "string",
							"Description": "key of the cookie"
						}
					],
					"Returns": {
						"Type": "*http.Cookie"
					}
				},
				{
					"Name": "SetHeader",
					"Line": "func (r *Request) SetHeader(key string, value string) *Request",
					"Description": "Set a paticular Header",
					"Parameters": [
						{
							"Name": "key",
							"Type": "string",
							"Description": "key of the Header"
						},
						{
							"Name": "value",
							"Type": "string",
							"Description": "value of the Header"
						}
					],
					"Returns": {
						"Type": "*Request"
					}
				},
				{
					"Name": "GetHeader",
					"Line": "func (r *Request) GetHeader(key string) string",
					"Description": "Get a paticular Header by its key",
					"Parameters": [
						{
							"Name": "key",
							"Type": "string",
							"Description": "key of the Header"
						}
					],
					"Returns": {
						"Type": "string"
					}
				}
			],
			"Properties": [
				{
					"Name": "ref",
					"Type": "*http.Request",
					"Description": "The net/http request instance"
				},
				{
					"Name": "fileReader",
					"Type": "multipart.Reader",
					"Description": "file reader instance"
				},
				{
					"Name": "body",
					"Type": "map[string][]string",
					"Description": "Value of the request body"
				},
				{
					"Name": "method",
					"Type": "string",
					"Description": "Request method"
				},
				{
					"Name": "Params",
					"Type": "[]*Params",
					"Description": "Request path parameters"
				},
				{
					"Name": "url.Values",
					"Type": "query",
					"Description": "Request path query params"
				},
				{
					"Name": "header",
					"Type": "IncomingHeader",
					"Description": "Incoming headers of the request"
				},
				{
					"Name": "json",
					"Type": "json.Decoder",
					"Description": "Json decoder instance"
				}
			]
		},
		{
			"Name": "OutgoingHeader",
			"Line": "type OutgoingHeader struct",
			"Description": "The Outgoing header structure",
			"Functions": [
				{
					"Name": "Set",
					"Line": "func (h *OutgoingHeader) Set(key string, value string) *OutgoingHeader",
					"Description": "Sets and new header to response",
					"Parameters": [
						{
							"Name": "key",
							"Type": "string",
							"Description": "Key of the new header"
						},
						{
							"Name": "value",
							"Type": "string",
							"Description": "Value of the new header"
						}
					],
					"Returns": {
						"Type": "OutgoingHeader"
					}
				},
				{
					"Name": "Get",
					"Line": "func (h *OutgoingHeader) Get(key string) string",
					"Description": "Gets the header from response headers",
					"Parameters": [
						{
							"Name": "key",
							"Type": "string",
							"Description": "Key of the header"
						}
					],
					"Returns": {
						"Type": "string"
					}
				},
				{
					"Name": "Del",
					"Line": "func (h *OutgoingHeader) Del(key string) *OutgoingHeader",
					"Description": "Deletes header from respose",
					"Parameters": [
						{
							"Name": "key",
							"Type": "string",
							"Description": "Key of the header"
						}
					],
					"Returns": {
						"Type": "OutgoingHeader"
					}
				},
				{
					"Name": "Clone",
					"Line": "func (h *OutgoingHeader) Clone() http.Header",
					"Description": "Clones all headers from response",
					"Returns": {
						"Type": "OutgoingHeader"
					}
				},
				{
					"Name": "Setlength",
					"Line": "func (h *OutgoingHeader) Setlength(len string) *OutgoingHeader",
					"Description": "Sets content lenght",
					"Parameters": [
						{
							"Name": "len",
							"Type": "string",
							"Description": "The lenght of the content"
						}
					],
					"Returns": {
						"Type": "OutgoingHeader"
					}
				},
				{
					"Name": "Status",
					"Line": "func (h *OutgoingHeader) Status(code int) *OutgoingHeader",
					"Description": "Sets response status",
					"Parameters": [
						{
							"Name": "code",
							"Type": "int",
							"Description": "The status code for the response"
						}
					],
					"Returns": {
						"Type": "OutgoingHeader"
					}
				},
				{
					"Name": "BaseHeaders",
					"Line": "func (h *OutgoingHeader) BaseHeaders()",
					"Description": "Sends good stack of base headers",
					"Returns": {}
				},
				{
					"Name": "Flush",
					"Line": "func (h *OutgoingHeader) Flush() bool",
					"Description": "Flushes and writes header to route",
					"Returns": {
						"Type": "bool"
					}
				}
			],
			"Properties": [
				{
					"Name": "req",
					"Type": "http.Request",
					"Description": "The net/http request instance"
				},
				{
					"Name": "res",
					"Type": "http.ResponseWriter",
					"Description": "The net/http response instance"
				},
				{
					"Name": "body",
					"Type": "bool",
					"Description": "Whether body has been sent or not"
				},
				{
					"Name": "status",
					"Type": "int",
					"Description": "response status code"
				}
			]
		},
		{
			"Name": "Response",
			"Line": "type Response struct",
			"Description": "The response instance structure",
			"Functions": [
				{
					"Name": "GetHeader",
					"Line": "func (res *Response) GetHeader(key string) string",
					"Description": "Gets header from response",
					"Parameters": [
						{
							"Name": "key",
							"Type": "string",
							"Description": "Key of the header"
						}
					],
					"Returns": {
						"Type": "string"
					}
				},
				{
					"Name": "SetHeader",
					"Line": "func (res *Response) SetHeader(key string, value string) *Response",
					"Description": "Sets headers for response",
					"Parameters": [
						{
							"Name": "key",
							"Type": "string",
							"Description": "Key of the header"
						},
						{
							"Name": "value",
							"Type": "string",
							"Description": "Value of the header"
						}
					],
					"Returns": {
						"Type": "string"
					}
				},
				{
					"Name": "DelHeader",
					"Line": "func (res *Response) DelHeader(key string) *Response",
					"Description": "Gets header from response",
					"Parameters": [
						{
							"Name": "key",
							"Type": "string",
							"Description": "Key of the header"
						}
					],
					"Returns": {
						"Type": "string"
					}
				},
				{
					"Name": "CloneHeaders",
					"Line": "func (res *Response) CloneHeaders() http.Header",
					"Description": "Clones all header from response",
					"Returns": {
						"Type": "http.Header"
					}
				},
				{
					"Name": "Setlength",
					"Line": "func (res *Response) Setlength(len string) *Response",
					"Description": "Sets length of the response body",
					"Parameters": [
						{
							"Name": "len",
							"Type": "string",
							"Description": "length value of the header"
						}
					],
					"Returns": {
						"Type": "*Response"
					}
				},
				{
					"Name": "SetBaseHeaders",
					"Line": "func (res *Response) SetBaseHeaders() *Response",
					"Description": "Sets a good stack of base headers for response",
					"Returns": {
						"Type": "*Response"
					}
				},
				{
					"Name": "FlushHeaders",
					"Line": "func (res *Response) FlushHeaders() *Response",
					"Description": "Flushes headers to the response body",
					"Returns": {
						"Type": "*Response"
					}
				},
				{
					"Name": "Send",
					"Line": "func (res *Response) Send(content string) *Response",
					"Description": "Sends string to the route",
					"Parameters": [
						{
							"Name": "content",
							"Type": "string",
							"Description": "The content to write"
						}
					],
					"Returns": {
						"Type": "Response"
					}
				},
				{
					"Name": "WriteBytes",
					"Line": "func (res *Response) WriteBytes(bytes []byte) error",
					"Description": "Writes bytes to the route",
					"Parameters": [
						{
							"Name": "bytes",
							"Type": "[]bytes",
							"Description": "The bytes to write"
						}
					],
					"Returns": {
						"Type": "Response"
					}
				},
				{
					"Name": "Json",
					"Line": "func (res *Response) Json(content interface}) *Response",
					"Description": "Writes json content to the route",
					"Parameters": [
						{
							"Name": "content",
							"Type": "interface{",
							"Description": "}  The json struct to write to the page"
						}
					],
					"Returns": {
						"Type": "Response"
					}
				},
				{
					"Name": "Error",
					"Line": "func (res *Response) Error(status int, err string) *Response",
					"Description": "Returns error to the route",
					"Parameters": [
						{
							"Name": "status",
							"Type": "int",
							"Description": "The status code of the error"
						},
						{
							"Name": "err",
							"Type": "string",
							"Description": "The error to write"
						}
					],
					"Returns": {
						"Type": "Response"
					}
				},
				{
					"Name": "Raw",
					"Line": "func (res *Response) Raw() http.ResponseWriter",
					"Description": "Returns raw http.ResponseWriter instance",
					"Returns": {
						"Type": "http.ResponseWriter"
					}
				},
				{
					"Name": "Render",
					"Line": "func (res *Response) Render(path string, data interface}) *Response",
					"Description": "Renders a html page with payload data to the route",
					"Parameters": [
						{
							"Name": "path",
							"Type": "string",
							"Description": "The dir path of the html page"
						},
						{
							"Name": "data",
							"Type": "interface{",
							"Description": "}  The payload data to pass in html page"
						}
					],
					"Returns": {
						"Type": "Response"
					}
				},
				{
					"Name": "CloseConn",
					"Line": "func (res *Response) CloseConn() error",
					"Description": "Ends connection to the route page",
					"Returns": {
						"Type": "error"
					}
				},
				{
					"Name": "Redirect",
					"Line": "func (res *Response) Redirect(url string) *Response",
					"Description": "Redirects to a different route",
					"Parameters": [
						{
							"Name": "url",
							"Type": "string",
							"Description": "The url of the route to redirect"
						}
					],
					"Returns": {
						"Type": "Response"
					}
				},
				{
					"Name": "Status",
					"Line": "func (res *Response) Status(status int) *Response",
					"Description": "Sets response status",
					"Parameters": [
						{
							"Name": "status",
							"Type": "int",
							"Description": "The status code for the response"
						}
					],
					"Returns": {
						"Type": "Response"
					}
				},
				{
					"Name": "SetCookie",
					"Line": "func (res *Response) SetCookie(cookie *http.Cookie) *Response",
					"Description": "Set a cookie",
					"Parameters": [
						{
							"Name": "cookie",
							"Type": "*http.Cookie"
						}
					],
					"Returns": {
						"Type": "Response"
					}
				},
				{
					"Name": "ClearCookie",
					"Line": "func (res *Response) ClearCookie(cookie *http.Cookie) *Response",
					"Description": "Clear a cookie",
					"Parameters": [
						{
							"Name": "cookie",
							"Type": "*http.Cookie"
						}
					],
					"Returns": {
						"Type": "Response"
					}
				},
				{
					"Name": "OK",
					"Line": "func (res *Response) OK() *Response",
					"Description": "Set status code as 200",
					"Returns": {
						"Type": "Response"
					}
				},
				{
					"Name": "MovedPermanently",
					"Line": "func (res *Response) MovedPermanently() *Response",
					"Description": "Set status code as 301",
					"Returns": {
						"Type": "Response"
					}
				},
				{
					"Name": "TemporaryRedirect",
					"Line": "func (res *Response) TemporaryRedirect() *Response",
					"Description": "Set status code as 307",
					"Returns": {
						"Type": "Response"
					}
				},
				{
					"Name": "BadRequest",
					"Line": "func (res *Response) BadRequest() *Response",
					"Description": "Set status code as 400",
					"Returns": {
						"Type": "Response"
					}
				},
				{
					"Name": "Unauthorized",
					"Line": "func (res *Response) Unauthorized() *Response",
					"Description": "Set status code as 401",
					"Returns": {
						"Type": "Response"
					}
				},
				{
					"Name": "Forbidden",
					"Line": "func (res *Response) Forbidden() *Response",
					"Description": "Set status code as 403",
					"Returns": {
						"Type": "Response"
					}
				},
				{
					"Name": "NotFound",
					"Line": "func (res *Response) NotFound() *Response",
					"Description": "Set status code as 404",
					"Returns": {
						"Type": "Response"
					}
				},
				{
					"Name": "InternalServerError",
					"Line": "func (res *Response) InternalServerError() *Response",
					"Description": "Set status code as 500",
					"Returns": {
						"Type": "Response"
					}
				},
				{
					"Name": "BadGateway",
					"Line": "func (res *Response) BadGateway() *Response",
					"Description": "Set status code as 502",
					"Returns": {
						"Type": "Response"
					}
				},
				{
					"Name": "ServiceUnavailaible",
					"Line": "func (res *Response) ServiceUnavailaible() *Response",
					"Description": "Set status code as 503",
					"Returns": {
						"Type": "Response"
					}
				}
			],
			"Properties": [
				{
					"Name": "ref",
					"Type": "http.ResponseWriter",
					"Description": "The net/http response instance"
				},
				{
					"Name": "url",
					"Type": "string",
					"Description": "The route url"
				},
				{
					"Name": "method",
					"Type": "string",
					"Description": "The route http method"
				},
				{
					"Name": "header",
					"Type": "OutgoingHeader",
					"Description": "The response header instance"
				},
				{
					"Name": "props",
					"Type": "*map[string]interface{",
					"Description": "}  The minima instance props"
				},
				{
					"Name": "host",
					"Type": "string",
					"Description": "The minima host"
				},
				{
					"Name": "HasEnded",
					"Type": "bool",
					"Description": "Whether the response has ended"
				}
			]
		},
		{
			"Name": "Router",
			"Line": "type Router struct",
			"Description": "The router structure",
			"Functions": [
				{
					"Name": "Register",
					"Line": "func (r *Router) Register(method string, path string, handler Handler) error",
					"Description": "Registers a new route to router interface",
					"Parameters": [
						{
							"Name": "path",
							"Type": "string",
							"Description": "The route path"
						}
					],
					"Returns": {}
				},
				{
					"Name": "Get",
					"Line": "func (r *Router) Get(path string, handler Handler) *Router",
					"Description": "Adds route with Get method",
					"Parameters": [
						{
							"Name": "path",
							"Type": "string",
							"Description": "The route path"
						},
						{
							"Name": "handler",
							"Type": "...Handler",
							"Description": "The handler for the given route"
						}
					],
					"Returns": {
						"Type": "*Router"
					}
				},
				{
					"Name": "Post",
					"Line": "func (r *Router) Post(path string, handler Handler) *Router",
					"Description": "Adds route with Post method",
					"Parameters": [
						{
							"Name": "path",
							"Type": "string",
							"Description": "The route path"
						},
						{
							"Name": "handler",
							"Type": "...Handler",
							"Description": "The handler for the given route"
						}
					],
					"Returns": {
						"Type": "*Router"
					}
				},
				{
					"Name": "Put",
					"Line": "func (r *Router) Put(path string, handler Handler) *Router",
					"Description": "Adds route with Put method",
					"Parameters": [
						{
							"Name": "path",
							"Type": "string",
							"Description": "The route path"
						},
						{
							"Name": "handler",
							"Type": "...Handler",
							"Description": "The handler for the given route"
						}
					],
					"Returns": {
						"Type": "*Router"
					}
				},
				{
					"Name": "Patch",
					"Line": "func (r *Router) Patch(path string, handler Handler)",
					"Description": "Adds route with Patch method",
					"Parameters": [
						{
							"Name": "path",
							"Type": "string",
							"Description": "The route path"
						},
						{
							"Name": "handler",
							"Type": "...Handler",
							"Description": "The handler for the given route"
						}
					],
					"Returns": {
						"Type": "*Router"
					}
				},
				{
					"Name": "Options",
					"Line": "func (r *Router) Options(path string, handler Handler) *Router",
					"Description": "Adds route with Options method",
					"Parameters": [
						{
							"Name": "path",
							"Type": "string",
							"Description": "The route path"
						},
						{
							"Name": "handler",
							"Type": "...Handler",
							"Description": "The handler for the given route"
						}
					],
					"Returns": {
						"Type": "*Router"
					}
				},
				{
					"Name": "Head",
					"Line": "func (r *Router) Head(path string, handler Handler) *Router",
					"Description": "Adds route with Head method",
					"Parameters": [
						{
							"Name": "path",
							"Type": "string",
							"Description": "The route path"
						},
						{
							"Name": "handler",
							"Type": "...Handler",
							"Description": "The handler for the given route"
						}
					],
					"Returns": {
						"Type": "*Router"
					}
				},
				{
					"Name": "Delete",
					"Line": "func (r *Router) Delete(path string, handler Handler) *Router",
					"Description": "Adds route with Delete method",
					"Parameters": [
						{
							"Name": "path",
							"Type": "string",
							"Description": "The route path"
						},
						{
							"Name": "handler",
							"Type": "...Handler",
							"Description": "The handler for the given route"
						}
					],
					"Returns": {
						"Type": "*Router"
					}
				},
				{
					"Name": "GetRouterRoutes",
					"Line": "func (r *Router) GetRouterRoutes() map[string]*Routes",
					"Description": "Returns all the routes in router",
					"Returns": {
						"Type": "map[string][]*mux"
					}
				},
				{
					"Name": "UseRouter",
					"Line": "func (r *Router) UseRouter(Router *Router) *Router",
					"Description": "Appends all routes to core router instance",
					"Parameters": [
						{
							"Name": "Router",
							"Type": "Router",
							"Description": "The router instance to append"
						}
					],
					"Returns": {
						"Type": "Router"
					}
				},
				{
					"Name": "Mount",
					"Line": "func (r *Router) Mount(path string, Router *Router) *Router",
					"Description": "Mounts router to a specific path",
					"Parameters": [
						{
							"Name": "path",
							"Type": "string",
							"Description": "The route path"
						},
						{
							"Name": "router",
							"Type": "*Router",
							"Description": "Minima router instance"
						}
					],
					"Returns": {
						"Type": "*Router"
					}
				}
			],
			"Properties": [
				{
					"Name": "routes",
					"Type": "map[string][]*Routes",
					"Description": "The mux routes"
				},
				{
					"Name": "notfound",
					"Type": "Handler",
					"Description": "The handler for the non matching routes"
				}
			]
		}
	]
}