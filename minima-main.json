{
	"Meta": {
		"Generator": "1",
		"Format": "1",
		"Date": "2022-03-08 15:55:11.743904949 +0000 UTC m=+0.000084402"
	},
	"Functions": [
		{
			"Name": "Chain",
			"Line": "func Chain(middlewares ...func(http.Handler) http.Handler) Middlewares",
			"Description": "Create a middleware chain",
			"Returns": {}
		},
		{
			"Name": "chain",
			"Line": "func chain(middlewares []func(http.Handler) http.Handler, endpoint http.Handler) http.Handler",
			"Description": "Builds the whole chain into one singular http.Handler",
			"Parameters": [
				{
					"Name": "middleware",
					"Type": "[]func(http.Handler)http.Handler",
					"Description": "The array of middleware stack"
				},
				{
					"Name": "endpoint",
					"Type": "http.Handler",
					"Description": "The endpoint of the chain stack"
				}
			],
			"Returns": {
				"Type": "http.Handler"
			}
		},
		{
			"Name": "NewGroup",
			"Line": "func NewGroup(prefix string) *Group",
			"Description": "Creates a new minima group",
			"Returns": {}
		},
		{
			"Name": "*Minima",
			"Line": "func New() *Minima",
			"Description": "Make a new default minima instance",
			"Returns": {
				"Type": "minima"
			}
		},
		{
			"Name": "request",
			"Line": "func request(r *http.Request) *Request",
			"Description": "Make a new default request instance",
			"Parameters": [
				{
					"Name": "http.Request",
					"Type": "http.Request",
					"Description": "The net/http request instance"
				}
			],
			"Returns": {
				"Type": "Request"
			}
		},
		{
			"Name": "NewResHeader",
			"Line": "func NewResHeader(res http.ResponseWriter, req *http.Request) *OutgoingHeader",
			"Description": "Make a new default request header instance",
			"Parameters": [
				{
					"Name": "req",
					"Type": "http.Request",
					"Description": "The net/http request instance"
				},
				{
					"Name": "res",
					"Type": "http.ResponseWriter",
					"Description": "The net/http response instance"
				}
			],
			"Returns": {
				"Type": "OutgoingHeader"
			}
		},
		{
			"Name": "response",
			"Line": "func response(rw http.ResponseWriter, req *http.Request) *Response",
			"Description": "Make a new default response instance",
			"Parameters": [
				{
					"Name": "req",
					"Type": "http.Request",
					"Description": "The net/http request instance"
				},
				{
					"Name": "rs",
					"Type": "http.ResponseWriter",
					"Description": "The net/http response instance"
				}
			],
			"Returns": {
				"Type": "Response"
			}
		},
		{
			"Name": "*Router",
			"Line": "func NewRouter() *Router",
			"Description": "Make new default router interface",
			"Returns": {}
		},
		{
			"Name": "*tree",
			"Line": "func NewTree() *tree",
			"Description": "Creates a new radix tree",
			"Returns": {}
		},
		{
			"Name": "ToMap",
			"Line": "func ToMap(tre *tree) map[string]Handler",
			"Description": "Turns a radix tree into a hash map",
			"Parameters": [
				{
					"Name": "tre",
					"Type": "tree",
					"Description": "The tree to convert"
				}
			],
			"Returns": {
				"Type": "map[string]Handler"
			}
		}
	],
	"Structures": [
		{
			"Name": "ChainHandler",
			"Line": "type ChainHandler struct",
			"Description": "Create a middleware chain",
			"Functions": [
				{
					"Name": "ServeHTTP",
					"Line": "func (c *ChainHandler) ServeHTTP(w http.ResponseWriter, r *http.Request)",
					"Description": "Injects the middleware chain to minima instance",
					"Parameters": [
						{
							"Name": "w",
							"Type": "http.ResponseWriter",
							"Description": "The net/http response instance"
						},
						{
							"Name": "r",
							"Type": "http.Request",
							"Description": "The net/http request instance"
						}
					],
					"Returns": {}
				}
			],
			"Properties": [
				{
					"Name": "Endpoint",
					"Type": "http.Handler",
					"Description": "The endpoint of the chain stack"
				},
				{
					"Name": "chain",
					"Type": "http.Handler",
					"Description": "The actual middleware stack chain"
				},
				{
					"Name": "Middlewares",
					"Type": "Middlewares",
					"Description": "The middleware stack"
				}
			]
		},
		{
			"Name": "Group",
			"Line": "type Group struct",
			"Description": "The minima group structure",
			"Functions": [
				{
					"Name": "Get",
					"Line": "func (g *Group) Get(path string, handler Handler) *Group",
					"Description": "Adds route with Get method",
					"Parameters": [
						{
							"Name": "path",
							"Type": "string",
							"Description": "The route path"
						},
						{
							"Name": "handler",
							"Type": "...Handler",
							"Description": "The handler for the given route"
						}
					],
					"Returns": {
						"Type": "*Router"
					}
				},
				{
					"Name": "Post",
					"Line": "func (g *Group) Post(path string, handler Handler) *Group",
					"Description": "Adds route with Post method",
					"Parameters": [
						{
							"Name": "path",
							"Type": "string",
							"Description": "The route path"
						},
						{
							"Name": "handler",
							"Type": "...Handler",
							"Description": "The handler for the given route"
						}
					],
					"Returns": {
						"Type": "*Group"
					}
				},
				{
					"Name": "Put",
					"Line": "func (g *Group) Put(path string, handler Handler) *Group",
					"Description": "Adds route with Put method",
					"Parameters": [
						{
							"Name": "path",
							"Type": "string",
							"Description": "The route path"
						},
						{
							"Name": "handler",
							"Type": "...Handler",
							"Description": "The handler for the given route"
						}
					],
					"Returns": {
						"Type": "*Group"
					}
				},
				{
					"Name": "Patch",
					"Line": "func (g *Group) Patch(path string, handler Handler)",
					"Description": "Adds route with Patch method",
					"Parameters": [
						{
							"Name": "path",
							"Type": "string",
							"Description": "The route path"
						},
						{
							"Name": "handler",
							"Type": "...Handler",
							"Description": "The handler for the given route"
						}
					],
					"Returns": {
						"Type": "*Group"
					}
				},
				{
					"Name": "Options",
					"Line": "func (g *Group) Options(path string, handler Handler) *Group",
					"Description": "Adds route with Options method",
					"Parameters": [
						{
							"Name": "path",
							"Type": "string",
							"Description": "The route path"
						},
						{
							"Name": "handler",
							"Type": "...Handler",
							"Description": "The handler for the given route"
						}
					],
					"Returns": {
						"Type": "*Group"
					}
				},
				{
					"Name": "Head",
					"Line": "func (g *Group) Head(path string, handler Handler) *Group",
					"Description": "Adds route with Head method",
					"Parameters": [
						{
							"Name": "path",
							"Type": "string",
							"Description": "The route path"
						},
						{
							"Name": "handler",
							"Type": "...Handler",
							"Description": "The handler for the given route"
						}
					],
					"Returns": {
						"Type": "*Group"
					}
				},
				{
					"Name": "Delete",
					"Line": "func (g *Group) Delete(path string, handler Handler) *Group",
					"Description": "Adds route with Delete method",
					"Parameters": [
						{
							"Name": "path",
							"Type": "string",
							"Description": "The route path"
						},
						{
							"Name": "handler",
							"Type": "...Handler",
							"Description": "The handler for the given route"
						}
					],
					"Returns": {
						"Type": "*Group"
					}
				},
				{
					"Name": "[]*cacheRoute",
					"Line": "func (g *Group) GetGroupRoutes() []*cacheRoute",
					"Description": "Returns all routes for the group",
					"Returns": {}
				}
			],
			"Properties": [
				{
					"Name": "route",
					"Type": "[]cacheroute",
					"Description": "The array of cached routes"
				},
				{
					"Name": "prefix",
					"Type": "[string",
					"Description": "The group prefix"
				}
			]
		},
		{
			"Name": "Minima",
			"Line": "type Minima struct",
			"Description": "The framework structure",
			"Functions": [
				{
					"Name": "Listen",
					"Line": "func (m *Minima) Listen(addr string) error",
					"Description": "Starts the actual http server",
					"Parameters": [
						{
							"Name": "addr",
							"Type": "string",
							"Description": "The port for the server instance to run on"
						}
					],
					"Returns": {
						"Type": "error"
					}
				},
				{
					"Name": "ServeHTTP",
					"Line": "func (m *Minima) ServeHTTP(w http.ResponseWriter, r *http.Request)",
					"Description": "Injects the actual minima server logic to http",
					"Parameters": [
						{
							"Name": "w",
							"Type": "http.ResponseWriter",
							"Description": "The net/http response instance"
						},
						{
							"Name": "r",
							"Type": "http.Request",
							"Description": "The net/http request instance"
						}
					],
					"Returns": {}
				},
				{
					"Name": "Get",
					"Line": "func (m *Minima) Get(path string, handler Handler) *Minima",
					"Description": "Adds route with Get method",
					"Parameters": [
						{
							"Name": "path",
							"Type": "string",
							"Description": "The route path"
						},
						{
							"Name": "handler",
							"Type": "...Handler",
							"Description": "The handler for the given route"
						}
					],
					"Returns": {
						"Type": "*minima"
					}
				},
				{
					"Name": "Put",
					"Line": "func (m *Minima) Put(path string, handler Handler) *Minima",
					"Description": "Adds route with Put method",
					"Parameters": [
						{
							"Name": "path",
							"Type": "string",
							"Description": "The route path"
						},
						{
							"Name": "handler",
							"Type": "...Handler",
							"Description": "The handler for the given route"
						}
					],
					"Returns": {
						"Type": "*minima"
					}
				},
				{
					"Name": "Options",
					"Line": "func (m *Minima) Options(path string, handler Handler) *Minima",
					"Description": "Adds route with Options method",
					"Parameters": [
						{
							"Name": "path",
							"Type": "string",
							"Description": "The route path"
						},
						{
							"Name": "handler",
							"Type": "...Handler",
							"Description": "The handler for the given route"
						}
					],
					"Returns": {
						"Type": "*minima"
					}
				},
				{
					"Name": "Head",
					"Line": "func (m *Minima) Head(path string, handler Handler) *Minima",
					"Description": "Adds route with Head method",
					"Parameters": [
						{
							"Name": "path",
							"Type": "string",
							"Description": "The route path"
						},
						{
							"Name": "handler",
							"Type": "...Handler",
							"Description": "The handler for the given route"
						}
					],
					"Returns": {
						"Type": "*minima"
					}
				},
				{
					"Name": "Delete",
					"Line": "func (m *Minima) Delete(path string, handler Handler) *Minima",
					"Description": "Adds route with Delete method",
					"Parameters": [
						{
							"Name": "path",
							"Type": "string",
							"Description": "The route path"
						},
						{
							"Name": "handler",
							"Type": "...Handler",
							"Description": "The handler for the given route"
						}
					],
					"Returns": {
						"Type": "*minima"
					}
				},
				{
					"Name": "Patch",
					"Line": "func (m *Minima) Patch(path string, handler Handler) *Minima",
					"Description": "Adds route with Patch method",
					"Parameters": [
						{
							"Name": "path",
							"Type": "string",
							"Description": "The route path"
						},
						{
							"Name": "handler",
							"Type": "...Handler",
							"Description": "The handler for the given route"
						}
					],
					"Returns": {
						"Type": "*minima"
					}
				},
				{
					"Name": "Post",
					"Line": "func (m *Minima) Post(path string, handler Handler) *Minima",
					"Description": "Adds route with Post method",
					"Parameters": [
						{
							"Name": "path",
							"Type": "string",
							"Description": "The route path"
						},
						{
							"Name": "handler",
							"Type": "...Handler",
							"Description": "The handler for the given route"
						}
					],
					"Returns": {
						"Type": "*minima"
					}
				},
				{
					"Name": "NotFound",
					"Line": "func (m *Minima) NotFound(handler Handler) *Minima",
					"Description": "Injects the NotFound handler to the minima instance",
					"Parameters": [
						{
							"Name": "handler",
							"Type": "Handler",
							"Description": "Minima handler instance"
						}
					],
					"Returns": {
						"Type": "*minima"
					}
				},
				{
					"Name": "UseRouter",
					"Line": "func (m *Minima) UseRouter(router *Router) *Minima",
					"Description": "Injects the routes from the router to core stack",
					"Parameters": [
						{
							"Name": "router",
							"Type": "*Router",
							"Description": "Minima router instance"
						}
					],
					"Returns": {
						"Type": "*minima"
					}
				},
				{
					"Name": "ShutdownTimeout",
					"Line": "func (m *Minima) ShutdownTimeout(t time.Duration) *Minima",
					"Description": "The drain timeout for the core instance",
					"Parameters": [
						{
							"Name": "time",
							"Type": "time.Duration",
							"Description": "The time period for drain"
						}
					],
					"Returns": {
						"Type": "*minima"
					}
				},
				{
					"Name": "Shutdown",
					"Line": "func (m *Minima) Shutdown(ctx context.Context) error",
					"Description": "Shutdowns the core instance",
					"Parameters": [
						{
							"Name": "ctx",
							"Type": "context.Context",
							"Description": "The context for shutdown"
						}
					],
					"Returns": {
						"Type": "error"
					}
				},
				{
					"Name": "SetProp",
					"Line": "func (m *Minima) SetProp(key string, value interface}) *Minima",
					"Description": "Declares prop for core properties",
					"Parameters": [
						{
							"Name": "key",
							"Type": "string",
							"Description": "Key for the prop"
						},
						{
							"Name": "value",
							"Type": "interface",
							"Description": "{interface{}}  Value of the prop"
						}
					],
					"Returns": {
						"Type": "*minima"
					}
				},
				{
					"Name": "GetProp",
					"Line": "func (m *Minima) GetProp(key string) interface}",
					"Description": "Gets prop from core properties",
					"Parameters": [
						{
							"Name": "key",
							"Type": "string",
							"Description": "Key for the prop"
						}
					],
					"Returns": {
						"Type": "interface",
						"Description": "{interface{}}"
					}
				},
				{
					"Name": "UseRaw",
					"Line": "func (m *Minima) UseRaw(handler ...func(http.Handler) http.Handler) *Minima",
					"Description": "Injects net/http middleware to the stack",
					"Parameters": [
						{
							"Name": "handler",
							"Type": "...http.HandlerFunc",
							"Description": "The handler stack to append"
						}
					],
					"Returns": {}
				},
				{
					"Name": "Use",
					"Line": "func (m *Minima) Use(handler Handler) *Minima",
					"Description": "Injects minima middleware to the stack",
					"Parameters": [
						{
							"Name": "handler",
							"Type": "Handler",
							"Description": "The handler stack to append"
						}
					],
					"Returns": {}
				},
				{
					"Name": "UseGroup",
					"Line": "func (m *Minima) UseGroup(grp *Group) *Minima",
					"Description": "Injects minima group to main router stack",
					"Parameters": [
						{
							"Name": "grp",
							"Type": "Group",
							"Description": "The minima group to append"
						}
					],
					"Returns": {}
				},
				{
					"Name": "File",
					"Line": "func (m *Minima) File(pth string, dir string)",
					"Description": "Injects a static file to minima instance",
					"Parameters": [
						{
							"Name": "pth",
							"Type": "string",
							"Description": "The route path for static serve"
						},
						{
							"Name": "dir",
							"Type": "string",
							"Description": "The dir of the file"
						}
					],
					"Returns": {}
				},
				{
					"Name": "Static",
					"Line": "func (m *Minima) Static(pth string, dir string)",
					"Description": "Injects a static directory to minima instance",
					"Parameters": [
						{
							"Name": "pth",
							"Type": "string",
							"Description": "The route path for static serve"
						},
						{
							"Name": "dir",
							"Type": "string",
							"Description": "The dir of the static folder"
						}
					],
					"Returns": {}
				}
			],
			"Properties": [
				{
					"Name": "server",
					"Type": "*http.Server",
					"Description": "The net/http stock server"
				},
				{
					"Name": "started",
					"Type": "bool",
					"Description": "Whether the server has started or not"
				},
				{
					"Name": "Timeout",
					"Type": "*time.Duration",
					"Description": "The router's breathing time"
				},
				{
					"Name": "router",
					"Type": "*Router",
					"Description": "The core router instance running with the server"
				},
				{
					"Name": "properties",
					"Type": "map[string]interface",
					"Description": "{map[string]interface{}}  The properties for the server instance"
				},
				{
					"Name": "Config",
					"Type": "*Config",
					"Description": "The core config file for middlewares and router instances"
				},
				{
					"Name": "drain",
					"Type": "*time.Duration",
					"Description": "The router's drain time"
				}
			]
		},
		{
			"Name": "Node",
			"Line": "type Node struct",
			"Description": "The tree Node structure",
			"Functions": [
				{
					"Name": "bool",
					"Line": "func (n *Node) IsLeaf() bool",
					"Description": "Whether the node is a leaf or not",
					"Returns": {
						"Type": "bool"
					}
				},
				{
					"Name": "*Node",
					"Line": "func (n *Node) clone() *Node",
					"Description": "Clones the current node",
					"Returns": {
						"Type": "*Node"
					}
				},
				{
					"Line": "func (n *Node) incrDepth()",
					"Description": "Increases node's depth in the tree",
					"Returns": {}
				}
			],
			"Properties": [
				{
					"Name": "handler",
					"Type": "Handler",
					"Description": "The handler to be used"
				},
				{
					"Name": "edges",
					"Type": "[]*edge",
					"Description": "The array of node edges"
				},
				{
					"Name": "priority",
					"Type": "int",
					"Description": "The priority of the node in the tree"
				},
				{
					"Name": "depth",
					"Type": "int",
					"Description": "The depth of the node in the tree"
				}
			]
		},
		{
			"Name": "IncomingHeader",
			"Line": "type IncomingHeader struct",
			"Description": "The Incoming header structure",
			"Functions": [
				{
					"Name": "Get",
					"Line": "func (h IncomingHeader) Get(key string) string",
					"Description": "Gets request header from given key",
					"Returns": {}
				},
				{
					"Name": "Set",
					"Line": "func (h *IncomingHeader) Set(key string, v string)",
					"Description": "Declares request header from given key",
					"Returns": {}
				}
			],
			"Properties": [
				{
					"Name": "headers",
					"Type": "[]*ReqHeader",
					"Description": "Array of request headers"
				}
			]
		},
		{
			"Name": "Request",
			"Line": "type Request struct",
			"Description": "The request structure",
			"Functions": [
				{
					"Name": "Param",
					"Line": "func (r *Request) Param(key string) string",
					"Description": "Gets param from route path",
					"Parameters": [
						{
							"Name": "key",
							"Type": "string",
							"Description": "Key of the route param"
						}
					],
					"Returns": {
						"Type": "string"
					}
				},
				{
					"Name": "SetParam",
					"Line": "func (r *Request) SetParam(key string, value string) *Request",
					"Description": "Sets param for route path",
					"Parameters": [
						{
							"Name": "key",
							"Type": "string",
							"Description": "Key of the route param"
						},
						{
							"Name": "value",
							"Type": "string",
							"Description": "Value of the route param"
						}
					],
					"Returns": {
						"Type": "Respone"
					}
				},
				{
					"Name": "string",
					"Line": "func (r *Request) Path() string",
					"Description": "Gets request path url",
					"Returns": {
						"Type": "string"
					}
				},
				{
					"Name": "map[string][]string",
					"Line": "func (r *Request) Body() map[string][]string",
					"Description": "Gets raw request body",
					"Returns": {
						"Type": "map[string][]string"
					}
				},
				{
					"Name": "BodyValue",
					"Line": "func (r *Request) BodyValue(key string) []string",
					"Description": "Gets specified request body",
					"Parameters": [
						{
							"Name": "key",
							"Type": "string",
							"Description": "Key of the request body"
						}
					],
					"Returns": {
						"Type": "[]string"
					}
				},
				{
					"Name": "*json.Decoder",
					"Line": "func (r *Request) Json() *json.Decoder",
					"Description": "Gets raw json decoder instance",
					"Returns": {
						"Type": "json.Decoder"
					}
				},
				{
					"Name": "string",
					"Line": "func (r *Request) Method() string",
					"Description": "Gets method of request",
					"Returns": {
						"Type": "string"
					}
				},
				{
					"Name": "*http.Request",
					"Line": "func (r *Request) Raw() *http.Request",
					"Description": "Gets raw net/http request instance",
					"Returns": {
						"Type": "http.Request"
					}
				},
				{
					"Name": "Query",
					"Line": "func (r *Request) Query(key string) string",
					"Description": "Gets request path query",
					"Parameters": [
						{
							"Name": "key",
							"Type": "string",
							"Description": "key of the request query"
						}
					],
					"Returns": {
						"Type": "string"
					}
				},
				{
					"Name": "string",
					"Line": "func (r *Request) QueryString() string",
					"Description": "Gets request path query in a string",
					"Returns": {
						"Type": "string"
					}
				},
				{
					"Name": "url.Values",
					"Line": "func (r *Request) QueryParams() url.Values",
					"Description": "Gets request path query in an array",
					"Parameters": [
						{
							"Name": "key",
							"Type": "string",
							"Description": "key of the request query"
						}
					],
					"Returns": {
						"Type": "string"
					}
				},
				{
					"Name": "string",
					"Line": "func (r *Request) IP() string",
					"Description": "Gets ip of the request origin",
					"Returns": {
						"Type": "string"
					}
				},
				{
					"Name": "bool",
					"Line": "func (r *Request) IsTLS() bool",
					"Description": "Whether the request is TLS or not",
					"Returns": {
						"Type": "bool"
					}
				},
				{
					"Name": "bool",
					"Line": "func (r *Request) IsSocket() bool",
					"Description": "Whether the request is a websocket or not",
					"Returns": {
						"Type": "bool"
					}
				},
				{
					"Name": "string",
					"Line": "func (r *Request) SchemeType() string",
					"Description": "Gets the scheme type of the request body",
					"Returns": {
						"Type": "bool"
					}
				},
				{
					"Name": "FormValue",
					"Line": "func (r *Request) FormValue(key string) string",
					"Description": "Gets the values from request form",
					"Parameters": [
						{
							"Name": "key",
							"Type": "string",
							"Description": "The key of the value"
						}
					],
					"Returns": {
						"Type": "string"
					}
				},
				{
					"Line": "func (r *Request) FormParams() (url.Values, error)",
					"Description": "Gets all the form param values",
					"Returns": {
						"Description": "{url.Values, error}"
					}
				},
				{
					"Name": "FormFile",
					"Line": "func (r *Request) FormFile(key string) (*multipart.FileHeader, error)",
					"Description": "Gets a file from request form",
					"Returns": {
						"Description": "{multipart.FileHeader, error}"
					}
				},
				{
					"Line": "func (r *Request) MultipartForm() (*multipart.Form, error)",
					"Description": "Gets a Multi part form from request form",
					"Returns": {
						"Description": "{multipart.Form, error}"
					}
				},
				{
					"Name": "[]*http.Cookie",
					"Line": "func (r *Request) Cookies() []*http.Cookie",
					"Description": "Get all the cookies from the request",
					"Returns": {
						"Type": "[]*http.Cookie"
					}
				},
				{
					"Name": "GetCookie",
					"Line": "func (r *Request) GetCookie(key string) *http.Cookie",
					"Description": "Get a paticular cookie by its key",
					"Parameters": [
						{
							"Name": "key",
							"Type": "string",
							"Description": "key of the cookie"
						}
					],
					"Returns": {
						"Type": "*http.Cookie"
					}
				},
				{
					"Name": "SetHeader",
					"Line": "func (r *Request) SetHeader(key string, value string) *Request",
					"Description": "Set a paticular Header",
					"Parameters": [
						{
							"Name": "key",
							"Type": "string",
							"Description": "key of the Header"
						},
						{
							"Name": "value",
							"Type": "string",
							"Description": "value of the Header"
						}
					],
					"Returns": {
						"Type": "*Request"
					}
				},
				{
					"Name": "GetHeader",
					"Line": "func (r *Request) GetHeader(key string) string",
					"Description": "Get a paticular Header by its key",
					"Parameters": [
						{
							"Name": "key",
							"Type": "string",
							"Description": "key of the Header"
						}
					],
					"Returns": {
						"Type": "string"
					}
				}
			],
			"Properties": [
				{
					"Name": "ref",
					"Type": "*http.Request",
					"Description": "The net/http request instance"
				},
				{
					"Name": "fileReader",
					"Type": "multipart.Reader",
					"Description": "file reader instance"
				},
				{
					"Name": "body",
					"Type": "map[string][]string",
					"Description": "Value of the request body"
				},
				{
					"Name": "method",
					"Type": "string",
					"Description": "Request method"
				},
				{
					"Name": "Params",
					"Type": "[]*Params",
					"Description": "Request path parameters"
				},
				{
					"Name": "url.Values",
					"Type": "query",
					"Description": "Request path query params"
				},
				{
					"Name": "header",
					"Type": "IncomingHeader",
					"Description": "Incoming headers of the request"
				},
				{
					"Name": "json",
					"Type": "json.Decoder",
					"Description": "Json decoder instance"
				}
			]
		},
		{
			"Name": "OutgoingHeader",
			"Line": "type OutgoingHeader struct",
			"Description": "The Outgoing header structure",
			"Functions": [
				{
					"Name": "Set",
					"Line": "func (h *OutgoingHeader) Set(key string, value string) *OutgoingHeader",
					"Description": "Sets and new header to response",
					"Parameters": [
						{
							"Name": "key",
							"Type": "string",
							"Description": "Key of the new header"
						},
						{
							"Name": "value",
							"Type": "string",
							"Description": "Value of the new header"
						}
					],
					"Returns": {
						"Type": "OutgoingHeader"
					}
				},
				{
					"Name": "Get",
					"Line": "func (h *OutgoingHeader) Get(key string) string",
					"Description": "Gets the header from response headers",
					"Parameters": [
						{
							"Name": "key",
							"Type": "string",
							"Description": "Key of the header"
						}
					],
					"Returns": {
						"Type": "string"
					}
				},
				{
					"Name": "Del",
					"Line": "func (h *OutgoingHeader) Del(key string) *OutgoingHeader",
					"Description": "Deletes header from respose",
					"Parameters": [
						{
							"Name": "key",
							"Type": "string",
							"Description": "Key of the header"
						}
					],
					"Returns": {
						"Type": "OutgoingHeader"
					}
				},
				{
					"Name": "http.Header",
					"Line": "func (h *OutgoingHeader) Clone() http.Header",
					"Description": "Clones all headers from response",
					"Returns": {
						"Type": "OutgoingHeader"
					}
				},
				{
					"Name": "Setlength",
					"Line": "func (h *OutgoingHeader) Setlength(len string) *OutgoingHeader",
					"Description": "Sets content lenght",
					"Parameters": [
						{
							"Name": "len",
							"Type": "string",
							"Description": "The lenght of the content"
						}
					],
					"Returns": {
						"Type": "OutgoingHeader"
					}
				},
				{
					"Name": "Status",
					"Line": "func (h *OutgoingHeader) Status(code int) *OutgoingHeader",
					"Description": "Sets response status",
					"Parameters": [
						{
							"Name": "code",
							"Type": "int",
							"Description": "The status code for the response"
						}
					],
					"Returns": {
						"Type": "OutgoingHeader"
					}
				},
				{
					"Line": "func (h *OutgoingHeader) BaseHeaders()",
					"Description": "Sends good stack of base headers",
					"Returns": {}
				},
				{
					"Name": "bool",
					"Line": "func (h *OutgoingHeader) Flush() bool",
					"Description": "Flushes and writes header to route",
					"Returns": {
						"Type": "bool"
					}
				}
			],
			"Properties": [
				{
					"Name": "req",
					"Type": "http.Request",
					"Description": "The net/http request instance"
				},
				{
					"Name": "res",
					"Type": "http.ResponseWriter",
					"Description": "The net/http response instance"
				},
				{
					"Name": "body",
					"Type": "bool",
					"Description": "Whether body has been sent or not"
				},
				{
					"Name": "status",
					"Type": "int",
					"Description": "response status code"
				}
			]
		},
		{
			"Name": "Response",
			"Line": "type Response struct",
			"Description": "The response instance structure",
			"Functions": [
				{
					"Name": "GetHeader",
					"Line": "func (res *Response) GetHeader(key string) string",
					"Description": "Gets header from response",
					"Parameters": [
						{
							"Name": "key",
							"Type": "string",
							"Description": "Key of the header"
						}
					],
					"Returns": {
						"Type": "string"
					}
				},
				{
					"Name": "SetHeader",
					"Line": "func (res *Response) SetHeader(key string, value string) *Response",
					"Description": "Sets headers for response",
					"Parameters": [
						{
							"Name": "key",
							"Type": "string",
							"Description": "Key of the header"
						},
						{
							"Name": "value",
							"Type": "string",
							"Description": "Value of the header"
						}
					],
					"Returns": {
						"Type": "string"
					}
				},
				{
					"Name": "DelHeader",
					"Line": "func (res *Response) DelHeader(key string) *Response",
					"Description": "Gets header from response",
					"Parameters": [
						{
							"Name": "key",
							"Type": "string",
							"Description": "Key of the header"
						}
					],
					"Returns": {
						"Type": "string"
					}
				},
				{
					"Name": "http.Header",
					"Line": "func (res *Response) CloneHeaders() http.Header",
					"Description": "Clones all header from response",
					"Returns": {
						"Type": "http.Header"
					}
				},
				{
					"Name": "Setlength",
					"Line": "func (res *Response) Setlength(len string) *Response",
					"Description": "Sets length of the response body",
					"Parameters": [
						{
							"Name": "len",
							"Type": "string",
							"Description": "length value of the header"
						}
					],
					"Returns": {
						"Type": "*Response"
					}
				},
				{
					"Name": "*Response",
					"Line": "func (res *Response) SetBaseHeaders() *Response",
					"Description": "Sets a good stack of base headers for response",
					"Returns": {
						"Type": "*Response"
					}
				},
				{
					"Name": "*Response",
					"Line": "func (res *Response) FlushHeaders() *Response",
					"Description": "Flushes headers to the response body",
					"Returns": {
						"Type": "*Response"
					}
				},
				{
					"Name": "Send",
					"Line": "func (res *Response) Send(content string) *Response",
					"Description": "Sends string to the route",
					"Parameters": [
						{
							"Name": "content",
							"Type": "string",
							"Description": "The content to write"
						}
					],
					"Returns": {
						"Type": "Response"
					}
				},
				{
					"Name": "WriteBytes",
					"Line": "func (res *Response) WriteBytes(bytes []byte) error",
					"Description": "Writes bytes to the route",
					"Parameters": [
						{
							"Name": "bytes",
							"Type": "[]bytes",
							"Description": "The bytes to write"
						}
					],
					"Returns": {
						"Type": "Response"
					}
				},
				{
					"Name": "JSON",
					"Line": "func (res *Response) JSON(content interface}) *Response",
					"Description": "Writes json content to the route",
					"Parameters": [
						{
							"Name": "content",
							"Type": "interface",
							"Description": "{interface{}}  The json struct to write to the page"
						}
					],
					"Returns": {
						"Type": "Response"
					}
				},
				{
					"Name": "XML",
					"Line": "func (res *Response) XML(content interface}, indent string) error",
					"Description": "Writes xml content to the route",
					"Parameters": [
						{
							"Name": "content",
							"Type": "interface",
							"Description": "{interface{}}  The xml content to write to the page"
						},
						{
							"Name": "indent",
							"Type": "string",
							"Description": "The indentation of the content"
						}
					],
					"Returns": {
						"Type": "error"
					}
				},
				{
					"Name": "Stream",
					"Line": "func (res *Response) Stream(contentType string, read io.Reader) error",
					"Description": "Streams content to the route",
					"Parameters": [
						{
							"Name": "contentType",
							"Type": "string",
							"Description": "The content type to stream"
						},
						{
							"Name": "read",
							"Type": "io.Reader",
							"Description": "The io.Reader instance"
						}
					],
					"Returns": {
						"Type": "error"
					}
				},
				{
					"Name": "NoContent",
					"Line": "func (res *Response) NoContent(code int) error",
					"Description": "Sets page's content to none",
					"Parameters": [
						{
							"Name": "code",
							"Type": "int",
							"Description": "The status code"
						}
					],
					"Returns": {
						"Type": "error"
					}
				},
				{
					"Name": "Error",
					"Line": "func (res *Response) Error(status int, err string) *Response",
					"Description": "Returns error to the route",
					"Parameters": [
						{
							"Name": "status",
							"Type": "int",
							"Description": "The status code of the error"
						},
						{
							"Name": "err",
							"Type": "string",
							"Description": "The error to write"
						}
					],
					"Returns": {
						"Type": "Response"
					}
				},
				{
					"Name": "http.ResponseWriter",
					"Line": "func (res *Response) Raw() http.ResponseWriter",
					"Description": "Returns raw http.ResponseWriter instance",
					"Returns": {
						"Type": "http.ResponseWriter"
					}
				},
				{
					"Name": "Render",
					"Line": "func (res *Response) Render(path string, data interface}) *Response",
					"Description": "Renders a html page with payload data to the route",
					"Parameters": [
						{
							"Name": "path",
							"Type": "string",
							"Description": "The dir path of the html page"
						},
						{
							"Name": "data",
							"Type": "interface",
							"Description": "{interface{}}  The payload data to pass in html page"
						}
					],
					"Returns": {
						"Type": "Response"
					}
				},
				{
					"Name": "error",
					"Line": "func (res *Response) CloseConn() error",
					"Description": "Ends connection to the route page",
					"Returns": {
						"Type": "error"
					}
				},
				{
					"Name": "File",
					"Line": "func (res *Response) File(dir string) (error)",
					"Description": "Sends a file to the server",
					"Returns": {
						"Type": "error"
					}
				},
				{
					"Name": "Redirect",
					"Line": "func (res *Response) Redirect(url string) *Response",
					"Description": "Redirects to a different route",
					"Parameters": [
						{
							"Name": "url",
							"Type": "string",
							"Description": "The url of the route to redirect"
						}
					],
					"Returns": {
						"Type": "Response"
					}
				},
				{
					"Name": "Status",
					"Line": "func (res *Response) Status(status int) *Response",
					"Description": "Sets response status",
					"Parameters": [
						{
							"Name": "status",
							"Type": "int",
							"Description": "The status code for the response"
						}
					],
					"Returns": {
						"Type": "Response"
					}
				},
				{
					"Name": "SetCookie",
					"Line": "func (res *Response) SetCookie(cookie *http.Cookie) *Response",
					"Description": "Set a cookie",
					"Parameters": [
						{
							"Name": "cookie",
							"Type": "*http.Cookie"
						}
					],
					"Returns": {
						"Type": "Response"
					}
				},
				{
					"Name": "ClearCookie",
					"Line": "func (res *Response) ClearCookie(cookie *http.Cookie) *Response",
					"Description": "Clear a cookie",
					"Parameters": [
						{
							"Name": "cookie",
							"Type": "*http.Cookie"
						}
					],
					"Returns": {
						"Type": "Response"
					}
				},
				{
					"Name": "*Response",
					"Line": "func (res *Response) OK() *Response",
					"Description": "Set status code as 200",
					"Returns": {
						"Type": "Response"
					}
				},
				{
					"Name": "*Response",
					"Line": "func (res *Response) MovedPermanently() *Response",
					"Description": "Set status code as 301",
					"Returns": {
						"Type": "Response"
					}
				},
				{
					"Name": "*Response",
					"Line": "func (res *Response) TemporaryRedirect() *Response",
					"Description": "Set status code as 307",
					"Returns": {
						"Type": "Response"
					}
				},
				{
					"Name": "*Response",
					"Line": "func (res *Response) BadRequest() *Response",
					"Description": "Set status code as 400",
					"Returns": {
						"Type": "Response"
					}
				},
				{
					"Name": "*Response",
					"Line": "func (res *Response) Unauthorized() *Response",
					"Description": "Set status code as 401",
					"Returns": {
						"Type": "Response"
					}
				},
				{
					"Name": "*Response",
					"Line": "func (res *Response) Forbidden() *Response",
					"Description": "Set status code as 403",
					"Returns": {
						"Type": "Response"
					}
				},
				{
					"Name": "*Response",
					"Line": "func (res *Response) NotFound() *Response",
					"Description": "Set status code as 404",
					"Returns": {
						"Type": "Response"
					}
				},
				{
					"Name": "*Response",
					"Line": "func (res *Response) InternalServerError() *Response",
					"Description": "Set status code as 500",
					"Returns": {
						"Type": "Response"
					}
				},
				{
					"Name": "*Response",
					"Line": "func (res *Response) BadGateway() *Response",
					"Description": "Set status code as 502",
					"Returns": {
						"Type": "Response"
					}
				},
				{
					"Name": "*Response",
					"Line": "func (res *Response) ServiceUnavailable() *Response",
					"Description": "Set status code as 503",
					"Returns": {
						"Type": "Response"
					}
				}
			],
			"Properties": [
				{
					"Name": "ref",
					"Type": "http.ResponseWriter",
					"Description": "The net/http response instance"
				},
				{
					"Name": "url",
					"Type": "string",
					"Description": "The route url"
				},
				{
					"Name": "method",
					"Type": "string",
					"Description": "The route http method"
				},
				{
					"Name": "header",
					"Type": "OutgoingHeader",
					"Description": "The response header instance"
				},
				{
					"Name": "host",
					"Type": "string",
					"Description": "The minima host"
				},
				{
					"Name": "HasEnded",
					"Type": "bool",
					"Description": "Whether the response has ended"
				}
			]
		},
		{
			"Name": "cacheRoute",
			"Line": "type cacheRoute struct",
			"Description": "The cache routes struct",
			"Properties": [
				{
					"Name": "method",
					"Type": "string",
					"Description": "The route method"
				},
				{
					"Name": "handler",
					"Type": "Handler",
					"Description": "The handler for the cached route"
				},
				{
					"Name": "path",
					"Type": "string",
					"Description": "The path of the cached route"
				}
			]
		},
		{
			"Name": "Router",
			"Line": "type Router struct",
			"Description": "The router structure",
			"Functions": [
				{
					"Name": "Register",
					"Line": "func (r *Router) Register(method string, path string, handler Handler) error",
					"Description": "Registers a new route to router interface",
					"Parameters": [
						{
							"Name": "path",
							"Type": "string",
							"Description": "The route path"
						}
					],
					"Returns": {}
				},
				{
					"Name": "Get",
					"Line": "func (r *Router) Get(path string, handler Handler) *Router",
					"Description": "Adds route with Get method",
					"Parameters": [
						{
							"Name": "path",
							"Type": "string",
							"Description": "The route path"
						},
						{
							"Name": "handler",
							"Type": "...Handler",
							"Description": "The handler for the given route"
						}
					],
					"Returns": {
						"Type": "*Router"
					}
				},
				{
					"Name": "Post",
					"Line": "func (r *Router) Post(path string, handler Handler) *Router",
					"Description": "Adds route with Post method",
					"Parameters": [
						{
							"Name": "path",
							"Type": "string",
							"Description": "The route path"
						},
						{
							"Name": "handler",
							"Type": "...Handler",
							"Description": "The handler for the given route"
						}
					],
					"Returns": {
						"Type": "*Router"
					}
				},
				{
					"Name": "Put",
					"Line": "func (r *Router) Put(path string, handler Handler) *Router",
					"Description": "Adds route with Put method",
					"Parameters": [
						{
							"Name": "path",
							"Type": "string",
							"Description": "The route path"
						},
						{
							"Name": "handler",
							"Type": "...Handler",
							"Description": "The handler for the given route"
						}
					],
					"Returns": {
						"Type": "*Router"
					}
				},
				{
					"Name": "Patch",
					"Line": "func (r *Router) Patch(path string, handler Handler)",
					"Description": "Adds route with Patch method",
					"Parameters": [
						{
							"Name": "path",
							"Type": "string",
							"Description": "The route path"
						},
						{
							"Name": "handler",
							"Type": "...Handler",
							"Description": "The handler for the given route"
						}
					],
					"Returns": {
						"Type": "*Router"
					}
				},
				{
					"Name": "Options",
					"Line": "func (r *Router) Options(path string, handler Handler) *Router",
					"Description": "Adds route with Options method",
					"Parameters": [
						{
							"Name": "path",
							"Type": "string",
							"Description": "The route path"
						},
						{
							"Name": "handler",
							"Type": "...Handler",
							"Description": "The handler for the given route"
						}
					],
					"Returns": {
						"Type": "*Router"
					}
				},
				{
					"Name": "Head",
					"Line": "func (r *Router) Head(path string, handler Handler) *Router",
					"Description": "Adds route with Head method",
					"Parameters": [
						{
							"Name": "path",
							"Type": "string",
							"Description": "The route path"
						},
						{
							"Name": "handler",
							"Type": "...Handler",
							"Description": "The handler for the given route"
						}
					],
					"Returns": {
						"Type": "*Router"
					}
				},
				{
					"Name": "Delete",
					"Line": "func (r *Router) Delete(path string, handler Handler) *Router",
					"Description": "Adds route with Delete method",
					"Parameters": [
						{
							"Name": "path",
							"Type": "string",
							"Description": "The route path"
						},
						{
							"Name": "handler",
							"Type": "...Handler",
							"Description": "The handler for the given route"
						}
					],
					"Returns": {
						"Type": "*Router"
					}
				},
				{
					"Name": "[]*cacheRoute",
					"Line": "func (r *Router) GetCacheRoutes() []*cacheRoute",
					"Description": "Returns all the routes in router",
					"Returns": {
						"Type": "map[string][]*mux"
					}
				},
				{
					"Name": "UseRouter",
					"Line": "func (r *Router) UseRouter(Router *Router)",
					"Description": "Appends all routes to core router instance",
					"Parameters": [
						{
							"Name": "Router",
							"Type": "Router",
							"Description": "The router instance to append"
						}
					],
					"Returns": {
						"Type": "Router"
					}
				},
				{
					"Name": "use",
					"Line": "func (r *Router) use(handler ...func(http.Handler) http.Handler)",
					"Description": "Injects net/http middleware to the stack",
					"Parameters": [
						{
							"Name": "handler",
							"Type": "...func(http.Handler)http.Handler",
							"Description": "The handler stack to append"
						}
					],
					"Returns": {}
				},
				{
					"Line": "func (r *Router) buildHandler()",
					"Description": "Builds whole middleware stack chain into single handler",
					"Returns": {}
				}
			],
			"Properties": [
				{
					"Name": "routes",
					"Type": "map[string][]*tree",
					"Description": "The radix-tree based routes"
				},
				{
					"Name": "notfound",
					"Type": "Handler",
					"Description": "The handler for the non matching routes"
				},
				{
					"Name": "minmiddleware",
					"Type": "[]Handler",
					"Description": "The minima handler middleware stack"
				},
				{
					"Name": "middleware",
					"Type": "[]func(http.Handler)http.Handler",
					"Description": "The http.Handler middleware stack"
				},
				{
					"Name": "isCache",
					"Type": "bool",
					"Description": "Whether the router is cache or not"
				},
				{
					"Name": "cacheRoute",
					"Type": "[]*cacheRoute",
					"Description": "Slice of cached routes"
				},
				{
					"Name": "handler",
					"Type": "http.Handler",
					"Description": "The single http.Handler built on chaining the whole middleware stack"
				}
			]
		},
		{
			"Name": "tree",
			"Line": "type tree struct",
			"Description": "the radix tree structure",
			"Functions": [
				{
					"Name": "InsertNode",
					"Line": "func (tr *tree) InsertNode(key string, handler Handler)",
					"Description": "Inserts a new node in the tree",
					"Parameters": [
						{
							"Name": "key",
							"Type": "string",
							"Description": "The route path used as key"
						},
						{
							"Name": "handler",
							"Type": "Handler",
							"Description": "The handler to be used"
						}
					],
					"Returns": {}
				},
				{
					"Name": "GetNode",
					"Line": "func (tr *tree) GetNode(key string) (*Node, map[string]string)",
					"Description": "Finds a specific node from the tree",
					"Parameters": [
						{
							"Name": "key",
							"Type": "string",
							"Description": "The route path used as key"
						}
					],
					"Returns": {
						"Description": "{*Node, map[string]string}"
					}
				},
				{
					"Name": "InsertMap",
					"Line": "func (tr *tree) InsertMap(m map[string]Handler)",
					"Description": "Inserts a hash map to the tree",
					"Parameters": [
						{
							"Name": "m",
							"Type": "map[string]Handler",
							"Description": "The hash map to insert"
						}
					],
					"Returns": {}
				}
			],
			"Properties": [
				{
					"Name": "roots",
					"Type": "Node",
					"Description": "The roots of the tree"
				},
				{
					"Name": "len",
					"Type": "int",
					"Description": "The lenght of the tree"
				},
				{
					"Name": "size",
					"Type": "int",
					"Description": "The size of the tree"
				},
				{
					"Name": "safe",
					"Type": "bool",
					"Description": "Whether the mutex is enabled or not"
				},
				{
					"Name": "placeholder",
					"Type": "byte",
					"Description": "The regex byte for params"
				},
				{
					"Name": "delim",
					"Type": "byte",
					"Description": "The regex byte for params"
				},
				{
					"Name": "mu",
					"Type": "sync.Mutex",
					"Description": "The synx.Mutex instance"
				}
			]
		}
	]
}